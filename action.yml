name: "Terraform Drift Detection Workflow"
description: "This GitHub Action runs Terraform plan on the specified environment, and checks for drifts."
author: "osnatashush"
branding:
  icon: "check-square"
  color: "green"

inputs:
  working_directory:
    description: "The working directory"
    required: true
  emails:
    description: "list of email addresses to notify on drift"
    required: true
  environment:
    description: "The environment (e.g., dev, prod)"
    required: true
  aws_region:
    description: "AWS region"
    required: true
  aws_role:
    description: "AWS role to assume"
    required: true
  aws_account_id:
    required: true
  github_token:
    description: "GitHub token"
    required: true
  username:
    description: "SMTP username"
    required: true
  password:
    description: "SMTP password"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout the repository to the GitHub Actions runner
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Configure AWS credentials via OIDC
      id: auth
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: "arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role }}"

    - name: Terraform Init
      run: terraform init || terraform init -upgrade
      shell: bash
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Plan
      id: tf-plan
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed for environment ${{ inputs.environment }}!"
          exit 1
        else 
          echo "Terraform Plan successful for environment ${{ inputs.environment }}!"
          exit 0
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

    - name: Create String Output
      id: tf-plan-string
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)

        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output for environment ${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    # If changes are detected, create a new issue
    - name: Publish Drift Report
      id: report
      if: steps.tf-plan.outputs.exitcode == 2
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const body = `${process.env.SUMMARY}`;
          const title = 'Drift Detection In ${{ inputs.environment }}';
          const creator = 'github-actions[bot]'

          // Look to see if there is an existing drift issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator,
          });
          const existingIssue = issues.data.find(issue => issue.title === title); 

          if( existingIssue ) {
            if (existingIssue.body === body) {
              console.log('Drift Detected: Found matching issue with duplicate content');
            } else {
              console.log('Drift Detected: Updating existing issue');
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            }
          } else {
            console.log('Drift Detected: Creating new issue');
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            });
          }

    # If changes aren't detected, close only the relevant environment's issue
    - name: Close Drift Issue if No Changes
      if: steps.tf-plan.outputs.exitcode == 0
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const title = 'Drift Detection In ${{ inputs.environment }}';
          const creator = 'github-actions[bot]'

          // Look for an existing drift issue for this environment
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator
          });

          const existingIssue = issues.data.find(issue => issue.title === title);

          if (existingIssue) {
            console.log('No drift detected: Closing issue');
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
          }
    - name: Build Drift Report Body
      if: steps.tf-plan.outputs.exitcode == 2
      id: drift-body
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        {
          echo "body<<EOF"
          echo "üö® **Terraform Drift Detected in environment: _${{ inputs.environment }}_** üö®"
          echo ""
          echo "The following infrastructure drift has been detected:"
          echo ""
          echo '```terraform'
          terraform show -no-color tfplan
          echo '```'
          echo ""
          echo "üîé Please review and run \`terraform apply\` if these changes are expected."
          echo ""
          echo "üìç AWS Account: ${{ inputs.aws_account_id }}"
          echo "üìç AWS Region: ${{ inputs.aws_region }}"
          echo ""
          echo "üîó [View Repository](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY})"
          echo "üîó [View Workflow Run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
          echo ""
          echo "----"
          echo "_This message was automatically generated by GitHub Actions Drift Detection_"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Send mail
      if: steps.tf-plan.outputs.exitcode == 2
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.gmail.com # your SMTP server
        server_port: 465 # usually 465 for SSL/TLS
        secure: true # use TLS/SSL
        username: ${{ inputs.username }} # SMTP username
        password: ${{ inputs.password }} # SMTP password
        subject: "GitHub Actions Drift Detection"
        to: ${{ inputs.emails }}
        from: "Tratix Terraform <noreply@example.com>"
        body: ${{ steps.drift-body.outputs.body }}

    - name: Publish Failed Drift Report
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const title = 'Drift Detection In ${{ inputs.environment }}';
          const failedBody = 'Terraform Drift Execution Failed';
          const creator = 'github-actions[bot]';

          // Look for an existing drift issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            creator: creator
          });

          const existingIssue = issues.data.find(issue => issue.title === title);

          if (existingIssue) {
            console.log('Drift failed: Updating existing issue');
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: failedBody
            });
          } else {
            console.log('Drift failed: Creating new issue');
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: failedBody
            });
          }

    - name: Send mail of failure
      if: failure()
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.gmail.com # your SMTP server
        server_port: 465 # usually 465 for SSL/TLS
        secure: true # use TLS/SSL
        username: ${{ inputs.username }} # SMTP username
        password: ${{ inputs.password }} # SMTP password
        subject: "GitHub Actions Drift Detection"
        to: ${{ inputs.emails }} # list of recipients, comma separated
        from: "Tratix Terraform <noreply@example.com>"
        body: |
          üö® **GitHub Action Drift Detection Failed** üö®

          Something went wrong while running the drift detection workflow.

          üìç Environment: ${{ inputs.environment }}
          üìç AWS Account: ${{ inputs.aws_account_id }}
          üìç AWS Region: ${{ inputs.aws_region }}

          üîó [View Repository](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY})
          üîó [View Workflow Run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})

          ----
          _This message was automatically generated by GitHub Actions_
